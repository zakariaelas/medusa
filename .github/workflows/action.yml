name: Medusa Pipeline
on:
  pull_request:
    paths-ignore:
      - "docs/**"
      - "www/**"

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v2.3.5
        with:
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.4.1
        with:
          node-version: "14"
          cache: "yarn"

      - name: Get Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Load Yarn cache
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-v2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v2-

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-v2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-v2-

      - name: Log node_modules
        if: steps.yarn-cache.outputs.cache-hit == 'true'
        run: ls

      - name: Install project dependencies
        if: |
          steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
          steps.cache-node-modules.outputs.cache-hit != 'true'
        run: yarn

  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.5
        with:
          fetch-depth: 0

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-v2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-v2-

      - name: Yarn install
        run: yarn install --prefer-offline

      - name: Build Packages
        run: yarn build

      - name: Run unit tests
        run: yarn test

  integration-tests-api:
    runs-on: ubuntu-latest
    needs: setup
    name: Integration tests (${{ matrix.tests_dir }}) (chunk ${{ matrix.chunk }})

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        chunk: [0, 1]
        tests_dir:
          - integration-tests/api
          - integration-tests/plugins

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.5
        with:
          fetch-depth: 0

      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-v2-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-v2-

      - name: Yarn install
        run: yarn install --prefer-offline

      - name: Build Packages
        run: yarn build

      - name: Install dev cli
        run: sudo npm i -g medusa-dev-cli

      - name: Set path to medusa repo
        run: medusa-dev --set-path-to-repo `pwd`

      - name: Force install
        run: medusa-dev --force-install
        working-directory: ${{ matrix.tests_dir }}

      - name: Build integration tests
        run: yarn build
        working-directory: ${{ matrix.tests_dir }}

      - name: Set Chunks
        id: set-test-chunks
        run: echo "::set-output name=test-chunks::$(npx jest --listTests --json | jq -cM '[_nwise(length / 2 | ceil)]')"
        working-directory: ${{ matrix.tests_dir }}

      - name: Set Chunk IDs
        run: echo "::set-output name=test-chunk-ids::$(echo $CHUNKS | jq -cM 'to_entries | map(.key)')"
        env:
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}

      - name: Run integration tests
        run: echo $CHUNKS | jq '.[${{ matrix.chunk }}] | .[] | @text' | xargs yarn test --maxWorkers=50%
        working-directory: ${{ matrix.tests_dir }}
        env:
          DB_PASSWORD: postgres
          CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}
